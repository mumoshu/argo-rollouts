/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/argoproj/argo-rollouts/pkg/apis/rollouts/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WorkloadBalancerLister helps list WorkloadBalancers.
// All objects returned here must be treated as read-only.
type WorkloadBalancerLister interface {
	// List lists all WorkloadBalancers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WorkloadBalancer, err error)
	// WorkloadBalancers returns an object that can list and get WorkloadBalancers.
	WorkloadBalancers(namespace string) WorkloadBalancerNamespaceLister
	WorkloadBalancerListerExpansion
}

// workloadBalancerLister implements the WorkloadBalancerLister interface.
type workloadBalancerLister struct {
	indexer cache.Indexer
}

// NewWorkloadBalancerLister returns a new WorkloadBalancerLister.
func NewWorkloadBalancerLister(indexer cache.Indexer) WorkloadBalancerLister {
	return &workloadBalancerLister{indexer: indexer}
}

// List lists all WorkloadBalancers in the indexer.
func (s *workloadBalancerLister) List(selector labels.Selector) (ret []*v1alpha1.WorkloadBalancer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WorkloadBalancer))
	})
	return ret, err
}

// WorkloadBalancers returns an object that can list and get WorkloadBalancers.
func (s *workloadBalancerLister) WorkloadBalancers(namespace string) WorkloadBalancerNamespaceLister {
	return workloadBalancerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WorkloadBalancerNamespaceLister helps list and get WorkloadBalancers.
// All objects returned here must be treated as read-only.
type WorkloadBalancerNamespaceLister interface {
	// List lists all WorkloadBalancers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WorkloadBalancer, err error)
	// Get retrieves the WorkloadBalancer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.WorkloadBalancer, error)
	WorkloadBalancerNamespaceListerExpansion
}

// workloadBalancerNamespaceLister implements the WorkloadBalancerNamespaceLister
// interface.
type workloadBalancerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WorkloadBalancers in the indexer for a given namespace.
func (s workloadBalancerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.WorkloadBalancer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WorkloadBalancer))
	})
	return ret, err
}

// Get retrieves the WorkloadBalancer from the indexer for a given namespace and name.
func (s workloadBalancerNamespaceLister) Get(name string) (*v1alpha1.WorkloadBalancer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("workloadbalancer"), name)
	}
	return obj.(*v1alpha1.WorkloadBalancer), nil
}
